/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { acceptRequest } from '../fn/user/accept-request';
import { AcceptRequest$Params } from '../fn/user/accept-request';
import { addUser } from '../fn/user/add-user';
import { AddUser$Params } from '../fn/user/add-user';
import { fetchAllThisUserFriends } from '../fn/user/fetch-all-this-user-friends';
import { FetchAllThisUserFriends$Params } from '../fn/user/fetch-all-this-user-friends';
import { getAllReceivedRequests } from '../fn/user/get-all-received-requests';
import { GetAllReceivedRequests$Params } from '../fn/user/get-all-received-requests';
import { getAllTimeLineUsers } from '../fn/user/get-all-time-line-users';
import { GetAllTimeLineUsers$Params } from '../fn/user/get-all-time-line-users';
import { PageResponseFriendRequestRespDto } from '../models/page-response-friend-request-resp-dto';
import { PageResponseUserRespDto } from '../models/page-response-user-resp-dto';
import { refuseRequest } from '../fn/user/refuse-request';
import { RefuseRequest$Params } from '../fn/user/refuse-request';
import { unfriendUser } from '../fn/user/unfriend-user';
import { UnfriendUser$Params } from '../fn/user/unfriend-user';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addUser()` */
  static readonly AddUserPath = '/users/add/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  addUser$Response(params: AddUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addUser(params: AddUser$Params, context?: HttpContext): Observable<number> {
    return this.addUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `refuseRequest()` */
  static readonly RefuseRequestPath = '/users/refuse-req/{req-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `refuseRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  refuseRequest$Response(params: RefuseRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return refuseRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `refuseRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  refuseRequest(params: RefuseRequest$Params, context?: HttpContext): Observable<number> {
    return this.refuseRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `acceptRequest()` */
  static readonly AcceptRequestPath = '/users/accept-req/{req-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `acceptRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptRequest$Response(params: AcceptRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return acceptRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `acceptRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptRequest(params: AcceptRequest$Params, context?: HttpContext): Observable<number> {
    return this.acceptRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getAllTimeLineUsers()` */
  static readonly GetAllTimeLineUsersPath = '/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTimeLineUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTimeLineUsers$Response(params?: GetAllTimeLineUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserRespDto>> {
    return getAllTimeLineUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTimeLineUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTimeLineUsers(params?: GetAllTimeLineUsers$Params, context?: HttpContext): Observable<PageResponseUserRespDto> {
    return this.getAllTimeLineUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserRespDto>): PageResponseUserRespDto => r.body)
    );
  }

  /** Path part for operation `getAllReceivedRequests()` */
  static readonly GetAllReceivedRequestsPath = '/users/reqs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllReceivedRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReceivedRequests$Response(params?: GetAllReceivedRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseFriendRequestRespDto>> {
    return getAllReceivedRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllReceivedRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReceivedRequests(params?: GetAllReceivedRequests$Params, context?: HttpContext): Observable<PageResponseFriendRequestRespDto> {
    return this.getAllReceivedRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseFriendRequestRespDto>): PageResponseFriendRequestRespDto => r.body)
    );
  }

  /** Path part for operation `fetchAllThisUserFriends()` */
  static readonly FetchAllThisUserFriendsPath = '/users/friends';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `fetchAllThisUserFriends()` instead.
   *
   * This method doesn't expect any request body.
   */
  fetchAllThisUserFriends$Response(params?: FetchAllThisUserFriends$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserRespDto>> {
    return fetchAllThisUserFriends(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `fetchAllThisUserFriends$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  fetchAllThisUserFriends(params?: FetchAllThisUserFriends$Params, context?: HttpContext): Observable<PageResponseUserRespDto> {
    return this.fetchAllThisUserFriends$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserRespDto>): PageResponseUserRespDto => r.body)
    );
  }

  /** Path part for operation `unfriendUser()` */
  static readonly UnfriendUserPath = '/users/unfriend/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unfriendUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  unfriendUser$Response(params: UnfriendUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return unfriendUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unfriendUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unfriendUser(params: UnfriendUser$Params, context?: HttpContext): Observable<{
}> {
    return this.unfriendUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
